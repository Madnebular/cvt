#include "util/SIMD.h"
#include "math/Math.h"
#include "util/Timer.h"
#include "util/CVTTest.h"
#include "util/SIMDSSE.h"
#include "util/CPU.h"

namespace cvt {
	const float _table_alpha_u8_f[256] = {
		0.000000000000f, 0.003921568627f, 0.007843137255f, 0.011764705882f,
		0.015686274510f, 0.019607843137f, 0.023529411765f, 0.027450980392f,
		0.031372549020f, 0.035294117647f, 0.039215686275f, 0.043137254902f,
		0.047058823529f, 0.050980392157f, 0.054901960784f, 0.058823529412f,
		0.062745098039f, 0.066666666667f, 0.070588235294f, 0.074509803922f,
		0.078431372549f, 0.082352941176f, 0.086274509804f, 0.090196078431f,
		0.094117647059f, 0.098039215686f, 0.101960784314f, 0.105882352941f,
		0.109803921569f, 0.113725490196f, 0.117647058824f, 0.121568627451f,
		0.125490196078f, 0.129411764706f, 0.133333333333f, 0.137254901961f,
		0.141176470588f, 0.145098039216f, 0.149019607843f, 0.152941176471f,
		0.156862745098f, 0.160784313725f, 0.164705882353f, 0.168627450980f,
		0.172549019608f, 0.176470588235f, 0.180392156863f, 0.184313725490f,
		0.188235294118f, 0.192156862745f, 0.196078431373f, 0.200000000000f,
		0.203921568627f, 0.207843137255f, 0.211764705882f, 0.215686274510f,
		0.219607843137f, 0.223529411765f, 0.227450980392f, 0.231372549020f,
		0.235294117647f, 0.239215686275f, 0.243137254902f, 0.247058823529f,
		0.250980392157f, 0.254901960784f, 0.258823529412f, 0.262745098039f,
		0.266666666667f, 0.270588235294f, 0.274509803922f, 0.278431372549f,
		0.282352941176f, 0.286274509804f, 0.290196078431f, 0.294117647059f,
		0.298039215686f, 0.301960784314f, 0.305882352941f, 0.309803921569f,
		0.313725490196f, 0.317647058824f, 0.321568627451f, 0.325490196078f,
		0.329411764706f, 0.333333333333f, 0.337254901961f, 0.341176470588f,
		0.345098039216f, 0.349019607843f, 0.352941176471f, 0.356862745098f,
		0.360784313725f, 0.364705882353f, 0.368627450980f, 0.372549019608f,
		0.376470588235f, 0.380392156863f, 0.384313725490f, 0.388235294118f,
		0.392156862745f, 0.396078431373f, 0.400000000000f, 0.403921568627f,
		0.407843137255f, 0.411764705882f, 0.415686274510f, 0.419607843137f,
		0.423529411765f, 0.427450980392f, 0.431372549020f, 0.435294117647f,
		0.439215686275f, 0.443137254902f, 0.447058823529f, 0.450980392157f,
		0.454901960784f, 0.458823529412f, 0.462745098039f, 0.466666666667f,
		0.470588235294f, 0.474509803922f, 0.478431372549f, 0.482352941176f,
		0.486274509804f, 0.490196078431f, 0.494117647059f, 0.498039215686f,
		0.501960784314f, 0.505882352941f, 0.509803921569f, 0.513725490196f,
		0.517647058824f, 0.521568627451f, 0.525490196078f, 0.529411764706f,
		0.533333333333f, 0.537254901961f, 0.541176470588f, 0.545098039216f,
		0.549019607843f, 0.552941176471f, 0.556862745098f, 0.560784313725f,
		0.564705882353f, 0.568627450980f, 0.572549019608f, 0.576470588235f,
		0.580392156863f, 0.584313725490f, 0.588235294118f, 0.592156862745f,
		0.596078431373f, 0.600000000000f, 0.603921568627f, 0.607843137255f,
		0.611764705882f, 0.615686274510f, 0.619607843137f, 0.623529411765f,
		0.627450980392f, 0.631372549020f, 0.635294117647f, 0.639215686275f,
		0.643137254902f, 0.647058823529f, 0.650980392157f, 0.654901960784f,
		0.658823529412f, 0.662745098039f, 0.666666666667f, 0.670588235294f,
		0.674509803922f, 0.678431372549f, 0.682352941176f, 0.686274509804f,
		0.690196078431f, 0.694117647059f, 0.698039215686f, 0.701960784314f,
		0.705882352941f, 0.709803921569f, 0.713725490196f, 0.717647058824f,
		0.721568627451f, 0.725490196078f, 0.729411764706f, 0.733333333333f,
		0.737254901961f, 0.741176470588f, 0.745098039216f, 0.749019607843f,
		0.752941176471f, 0.756862745098f, 0.760784313725f, 0.764705882353f,
		0.768627450980f, 0.772549019608f, 0.776470588235f, 0.780392156863f,
		0.784313725490f, 0.788235294118f, 0.792156862745f, 0.796078431373f,
		0.800000000000f, 0.803921568627f, 0.807843137255f, 0.811764705882f,
		0.815686274510f, 0.819607843137f, 0.823529411765f, 0.827450980392f,
		0.831372549020f, 0.835294117647f, 0.839215686275f, 0.843137254902f,
		0.847058823529f, 0.850980392157f, 0.854901960784f, 0.858823529412f,
		0.862745098039f, 0.866666666667f, 0.870588235294f, 0.874509803922f,
		0.878431372549f, 0.882352941176f, 0.886274509804f, 0.890196078431f,
		0.894117647059f, 0.898039215686f, 0.901960784314f, 0.905882352941f,
		0.909803921569f, 0.913725490196f, 0.917647058824f, 0.921568627451f,
		0.925490196078f, 0.929411764706f, 0.933333333333f, 0.937254901961f,
		0.941176470588f, 0.945098039216f, 0.949019607843f, 0.952941176471f,
		0.956862745098f, 0.960784313725f, 0.964705882353f, 0.968627450980f,
		0.972549019608f, 0.976470588235f, 0.980392156863f, 0.984313725490f,
		0.988235294118f, 0.992156862745f, 0.996078431373f, 1.000000000000f
	};


	static const float _table_srgb_u8_f[256] = {
		0.000000000000f, 0.000303526984f, 0.000607053967f, 0.000910580951f,
		0.001214107934f, 0.001517634918f, 0.001821161901f, 0.002124688885f,
		0.002428215868f, 0.002731742852f, 0.003035269835f, 0.003346535764f,
		0.003676507324f, 0.004024717018f, 0.004391442037f, 0.004776953481f,
		0.005181516702f, 0.005605391624f, 0.006048833023f, 0.006512090793f,
		0.006995410187f, 0.007499032043f, 0.008023192985f, 0.008568125618f,
		0.009134058702f, 0.009721217320f, 0.010329823030f, 0.010960094006f,
		0.011612245180f, 0.012286488357f, 0.012983032342f, 0.013702083047f,
		0.014443843596f, 0.015208514423f, 0.015996293366f, 0.016807375753f,
		0.017641954488f, 0.018500220128f, 0.019382360957f, 0.020288563057f,
		0.021219010376f, 0.022173884793f, 0.023153366178f, 0.024157632449f,
		0.025186859627f, 0.026241221895f, 0.027320891639f, 0.028426039504f,
		0.029556834438f, 0.030713443733f, 0.031896033073f, 0.033104766571f,
		0.034339806809f, 0.035601314875f, 0.036889450401f, 0.038204371595f,
		0.039546235277f, 0.040915196907f, 0.042311410621f, 0.043735029257f,
		0.045186204386f, 0.046665086337f, 0.048171824227f, 0.049706565984f,
		0.051269458374f, 0.052860647023f, 0.054480276442f, 0.056128490050f,
		0.057805430191f, 0.059511238163f, 0.061246054232f, 0.063010017653f,
		0.064803266693f, 0.066625938644f, 0.068478169844f, 0.070360095697f,
		0.072271850682f, 0.074213568380f, 0.076185381481f, 0.078187421805f,
		0.080219820314f, 0.082282707130f, 0.084376211544f, 0.086500462037f,
		0.088655586286f, 0.090841711183f, 0.093058962847f, 0.095307466631f,
		0.097587347142f, 0.099898728247f, 0.102241733088f, 0.104616484091f,
		0.107023102978f, 0.109461710778f, 0.111932427837f, 0.114435373827f,
		0.116970667759f, 0.119538427988f, 0.122138772230f, 0.124771817561f,
		0.127437680436f, 0.130136476690f, 0.132868321554f, 0.135633329655f,
		0.138431615032f, 0.141263291140f, 0.144128470858f, 0.147027266498f,
		0.149959789811f, 0.152926151996f, 0.155926463708f, 0.158960835061f,
		0.162029375639f, 0.165132194502f, 0.168269400190f, 0.171441100733f,
		0.174647403656f, 0.177888415984f, 0.181164244250f, 0.184474994500f,
		0.187820772301f, 0.191201682741f, 0.194617830442f, 0.198069319560f,
		0.201556253794f, 0.205078736390f, 0.208636870145f, 0.212230757414f,
		0.215860500114f, 0.219526199729f, 0.223227957317f, 0.226965873510f,
		0.230740048524f, 0.234550582161f, 0.238397573812f, 0.242281122466f,
		0.246201326708f, 0.250158284730f, 0.254152094331f, 0.258182852922f,
		0.262250657530f, 0.266355604803f, 0.270497791013f, 0.274677312060f,
		0.278894263477f, 0.283148740430f, 0.287440837727f, 0.291770649818f,
		0.296138270798f, 0.300543794416f, 0.304987314070f, 0.309468922818f,
		0.313988713376f, 0.318546778125f, 0.323143209113f, 0.327778098057f,
		0.332451536346f, 0.337163615048f, 0.341914424909f, 0.346704056355f,
		0.351532599500f, 0.356400144146f, 0.361306779784f, 0.366252595599f,
		0.371237680474f, 0.376262122991f, 0.381326011433f, 0.386429433787f,
		0.391572477750f, 0.396755230726f, 0.401977779832f, 0.407240211902f,
		0.412542613484f, 0.417885070848f, 0.423267669986f, 0.428690496614f,
		0.434153636175f, 0.439657173841f, 0.445201194516f, 0.450785782838f,
		0.456411023180f, 0.462076999654f, 0.467783796112f, 0.473531496148f,
		0.479320183101f, 0.485149940056f, 0.491020849848f, 0.496932995061f,
		0.502886458033f, 0.508881320855f, 0.514917665377f, 0.520995573204f,
		0.527115125706f, 0.533276404011f, 0.539479489012f, 0.545724461370f,
		0.552011401512f, 0.558340389634f, 0.564711505705f, 0.571124829465f,
		0.577580440430f, 0.584078417891f, 0.590618840919f, 0.597201788364f,
		0.603827338855f, 0.610495570808f, 0.617206562420f, 0.623960391675f,
		0.630757136346f, 0.637596873994f, 0.644479681971f, 0.651405637420f,
		0.658374817279f, 0.665387298282f, 0.672443156958f, 0.679542469633f,
		0.686685312435f, 0.693871761292f, 0.701101891933f, 0.708375779892f,
		0.715693500506f, 0.723055128922f, 0.730460740090f, 0.737910408773f,
		0.745404209540f, 0.752942216776f, 0.760524504675f, 0.768151147248f,
		0.775822218317f, 0.783537791526f, 0.791297940333f, 0.799102738014f,
		0.806952257669f, 0.814846572216f, 0.822785754396f, 0.830769876775f,
		0.838799011741f, 0.846873231510f, 0.854992608124f, 0.863157213454f,
		0.871367119199f, 0.879622396888f, 0.887923117882f, 0.896269353374f,
		0.904661174391f, 0.913098651793f, 0.921581856277f, 0.930110858375f,
		0.938685728458f, 0.947306536733f, 0.955973353249f, 0.964686247894f,
		0.973445290398f, 0.982250550333f, 0.991102097114f, 1.000000000000f
	};

	static const uint8_t _table_f_srgb_ub[8193] = {
		0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06,
		0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C,
		0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11,
		0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15,
		0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19,
		0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F,
		0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24,
		0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26,
		0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
		0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
		0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C,
		0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E,
		0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33,
		0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35,
		0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
		0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38,
		0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A,
		0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C,
		0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
		0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E,
		0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
		0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
		0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
		0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46,
		0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47,
		0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48,
		0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49,
		0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A,
		0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B,
		0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
		0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D,
		0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E,
		0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F,
		0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
		0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
		0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52,
		0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53,
		0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x54,
		0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56,
		0x56, 0x56, 0x56, 0x56, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57,
		0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
		0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59,
		0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x5A, 0x5A, 0x5A, 0x5A,
		0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A,
		0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B,
		0x5B, 0x5B, 0x5B, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
		0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D,
		0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E,
		0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E,
		0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,
		0x5F, 0x5F, 0x5F, 0x5F, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
		0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x62, 0x62,
		0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62,
		0x62, 0x62, 0x62, 0x62, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
		0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
		0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x65,
		0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
		0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x67, 0x67, 0x67, 0x67,
		0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67,
		0x67, 0x67, 0x67, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68,
		0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69,
		0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69,
		0x69, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A,
		0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B,
		0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B,
		0x6B, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C,
		0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D,
		0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D,
		0x6D, 0x6D, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E,
		0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F,
		0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F,
		0x6F, 0x6F, 0x6F, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
		0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x71, 0x71, 0x71,
		0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71,
		0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,
		0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,
		0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73,
		0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74,
		0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74,
		0x74, 0x74, 0x74, 0x74, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75,
		0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x76,
		0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,
		0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
		0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
		0x78, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79,
		0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x7A, 0x7A, 0x7A,
		0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A,
		0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B,
		0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B,
		0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C,
		0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C,
		0x7C, 0x7C, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
		0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7E,
		0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
		0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x7F, 0x7F, 0x7F,
		0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
		0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
		0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
		0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
		0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
		0x82, 0x82, 0x82, 0x82, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
		0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
		0x83, 0x83, 0x83, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,
		0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,
		0x84, 0x84, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85,
		0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85,
		0x85, 0x85, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86,
		0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86,
		0x86, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
		0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
		0x87, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
		0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
		0x88, 0x88, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
		0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
		0x89, 0x89, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A,
		0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A,
		0x8A, 0x8A, 0x8A, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B,
		0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B,
		0x8B, 0x8B, 0x8B, 0x8B, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C,
		0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C,
		0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D,
		0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D,
		0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E,
		0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E,
		0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F,
		0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F,
		0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x90, 0x90, 0x90, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x91,
		0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91,
		0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91,
		0x91, 0x91, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92,
		0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92,
		0x92, 0x92, 0x92, 0x92, 0x92, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93,
		0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93,
		0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94,
		0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94,
		0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x95, 0x95, 0x95, 0x95,
		0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
		0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
		0x95, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96,
		0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96,
		0x96, 0x96, 0x96, 0x96, 0x96, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97,
		0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97,
		0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98,
		0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98,
		0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x99,
		0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
		0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
		0x99, 0x99, 0x99, 0x99, 0x99, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A,
		0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A,
		0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B,
		0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B,
		0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B,
		0x9B, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C,
		0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C,
		0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D,
		0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D,
		0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F,
		0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F,
		0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0xA0, 0xA0, 0xA0, 0xA0,
		0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0,
		0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0,
		0xA0, 0xA0, 0xA0, 0xA0, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1,
		0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1,
		0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA2, 0xA2, 0xA2, 0xA2,
		0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2,
		0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2,
		0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
		0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
		0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA4, 0xA4, 0xA4,
		0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4,
		0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4,
		0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5,
		0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5,
		0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5,
		0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6,
		0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6,
		0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7,
		0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7,
		0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7,
		0xA7, 0xA7, 0xA7, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8,
		0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8,
		0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA9, 0xA9, 0xA9,
		0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9,
		0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9,
		0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB,
		0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB,
		0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAC, 0xAC,
		0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC,
		0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC,
		0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD,
		0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD,
		0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD,
		0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE,
		0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE,
		0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE,
		0xAE, 0xAE, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF,
		0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF,
		0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xB0,
		0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0,
		0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0,
		0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB1, 0xB1, 0xB1, 0xB1,
		0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1,
		0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1,
		0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2,
		0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2,
		0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2,
		0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3,
		0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3,
		0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3,
		0xB3, 0xB3, 0xB3, 0xB3, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4,
		0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4,
		0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4,
		0xB4, 0xB4, 0xB4, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5,
		0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5,
		0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5,
		0xB5, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
		0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
		0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
		0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7,
		0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7,
		0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB8,
		0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8,
		0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8,
		0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB9,
		0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9,
		0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9,
		0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xBA,
		0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA,
		0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA,
		0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBB,
		0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
		0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
		0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
		0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC,
		0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC,
		0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC,
		0xBC, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD,
		0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD,
		0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD,
		0xBD, 0xBD, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE,
		0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE,
		0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE,
		0xBE, 0xBE, 0xBE, 0xBE, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF,
		0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF,
		0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF,
		0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
		0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
		0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
		0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1,
		0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1,
		0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1,
		0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2,
		0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2,
		0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2,
		0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC3, 0xC3, 0xC3,
		0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
		0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
		0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
		0xC3, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
		0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
		0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
		0xC4, 0xC4, 0xC4, 0xC4, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5,
		0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5,
		0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5,
		0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6,
		0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6,
		0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6,
		0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC7, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
		0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
		0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
		0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9,
		0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9,
		0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9,
		0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xCA, 0xCA, 0xCA, 0xCA,
		0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA,
		0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA,
		0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA,
		0xCA, 0xCA, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB,
		0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB,
		0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB,
		0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCD, 0xCD,
		0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
		0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
		0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
		0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE,
		0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE,
		0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE,
		0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCF, 0xCF, 0xCF, 0xCF,
		0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF,
		0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF,
		0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF,
		0xCF, 0xCF, 0xCF, 0xCF, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0,
		0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0,
		0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0,
		0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD1, 0xD1, 0xD1, 0xD1,
		0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1,
		0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1,
		0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1,
		0xD1, 0xD1, 0xD1, 0xD1, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2,
		0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2,
		0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2,
		0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD3, 0xD3, 0xD3, 0xD3,
		0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3,
		0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3,
		0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3,
		0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4,
		0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4,
		0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4,
		0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD5,
		0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5,
		0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5,
		0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5,
		0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6,
		0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6,
		0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6,
		0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6,
		0xD6, 0xD6, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7,
		0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7,
		0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7,
		0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD8, 0xD8, 0xD8,
		0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
		0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
		0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
		0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9,
		0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9,
		0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9,
		0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9,
		0xD9, 0xD9, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA,
		0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA,
		0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA,
		0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDB, 0xDB,
		0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
		0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
		0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
		0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
		0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
		0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
		0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
		0xDD, 0xDD, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE,
		0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE,
		0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE,
		0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDF,
		0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF,
		0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF,
		0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF,
		0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xE0, 0xE0, 0xE0, 0xE0,
		0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
		0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
		0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
		0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1,
		0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1,
		0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1,
		0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1,
		0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2,
		0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2,
		0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2,
		0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2,
		0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3,
		0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3,
		0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3,
		0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3,
		0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4,
		0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4,
		0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4,
		0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4,
		0xE4, 0xE4, 0xE4, 0xE4, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
		0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
		0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
		0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
		0xE5, 0xE5, 0xE5, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6,
		0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6,
		0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6,
		0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6,
		0xE6, 0xE6, 0xE6, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7,
		0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7,
		0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7,
		0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7,
		0xE7, 0xE7, 0xE7, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8,
		0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8,
		0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8,
		0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8, 0xE8,
		0xE8, 0xE8, 0xE8, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9,
		0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9,
		0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9,
		0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9, 0xE9,
		0xE9, 0xE9, 0xE9, 0xE9, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
		0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
		0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
		0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
		0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB,
		0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB,
		0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB,
		0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB,
		0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEB, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
		0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
		0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
		0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
		0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED,
		0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED,
		0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED,
		0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED,
		0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
		0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
		0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
		0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
		0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEF, 0xEF,
		0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF,
		0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF,
		0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF,
		0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF,
		0xEF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1,
		0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1,
		0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1,
		0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1,
		0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2,
		0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2,
		0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2,
		0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2,
		0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5,
		0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5,
		0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5,
		0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5,
		0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6,
		0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6,
		0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6,
		0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6,
		0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6,
		0xF6, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7,
		0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7,
		0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7,
		0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7,
		0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
		0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
		0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
		0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
		0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF9, 0xF9, 0xF9,
		0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9,
		0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9,
		0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9,
		0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9,
		0xF9, 0xF9, 0xF9, 0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA,
		0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA,
		0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA,
		0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA,
		0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
		0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
		0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
		0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
		0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
		0xFB, 0xFB, 0xFB, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
		0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
		0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
		0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
		0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
		0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
		0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
		0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
		0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
		0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
		0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
		0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
		0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
		0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF
	};

#define SRGB_U8_TO_F( x ) ( _table_srgb_u8_f[ x ] )
#define U8_TO_F( x )	  ( _table_alpha_u8_f[ x ] )

	static inline uint8_t F_TO_SRGB_U8( float val )
	{
		ssize_t idx  = ( ssize_t ) ( val * ( float ) ( 1 << 13 ) );
		if( idx < 0 ) return 0x0;
		if( idx >= ( 1 << 13 ) ) return 0xff;
		return _table_f_srgb_ub[ idx ];
	}

	SIMD* SIMD::_simd = 0;

	SIMD* SIMD::get( SIMDType type )
	{
		/* FIXME */
		if( !_simd && type == SIMD_BEST ) {
			uint32_t cpuf;
			cpuf = cpuFeatures();
			if( !cpuf )
				_simd = new SIMD();
			else if( cpuf & CPU_SSE )
				_simd = new SIMDSSE();
		} else if( !_simd || _simd->type() != type ) {
			if( _simd )
				delete _simd;
			switch( type ) {
				default:
				case SIMD_BASE: _simd = new SIMD();
								break;
				case SIMD_SSE: _simd = new SIMDSSE();
							   break;
			}
		}
		return _simd;
	}

	void SIMD::SetValueU8( uint8_t* dst, const uint8_t value, const size_t n ) const
	{
		size_t i = n & 0x3;
		uint32_t v = ( value << 24 ) | ( value << 16 ) | ( value << 8 ) | value;

		SetValueU32( ( uint32_t* ) dst, v, n >> 2 );
		dst += n & ( ~ 0x03 );
		while( i-- )
			*dst++ = value;
	}

	void SIMD::SetValueU16( uint16_t* dst, const uint16_t value, const size_t n ) const
	{
		uint32_t v = ( value << 16 ) | value;

		SetValueU32( ( uint32_t* ) dst, v, n >> 1 );
		if( n & 1 ) {
			dst += n & ( ~ 0x01 );
			*dst++ = value;
		}
	}

	void SIMD::SetValueU32( uint32_t* dst, const uint32_t value, const size_t n ) const
	{
		size_t i = n;
		while( i-- )
			*dst++ = value;
	}

	void SIMD::SetValue1f( float* dst, const float value, const size_t n ) const
	{
		size_t i = n;
		while( i-- )
			*dst++ = value;
	}

	void SIMD::SetValue2f( float* dst, const float (&value)[ 2 ], const size_t n ) const
	{
		float v[ 4 ] = { value[ 0 ], value[ 1 ], value[ 0 ], value[ 1 ] };

		SetValue4f( dst, v, n >> 1 );
		if( n & 0x01 ) {
			*dst++ = value[ 0 ];
			*dst++ = value[ 1 ];
		}
	}

	void SIMD::SetValue4f( float* dst, const float (&value)[ 4 ], const size_t n ) const
	{
		size_t i = n;
		while( i-- ) {
			*dst++ = value[ 0 ];
			*dst++ = value[ 1 ];
			*dst++ = value[ 2 ];
			*dst++ = value[ 3 ];
		}
	}

	void SIMD::Add( float* dst, float const* src1, float const* src2, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src1++ + *src2++;
			*dst++ = *src1++ + *src2++;
			*dst++ = *src1++ + *src2++;
			*dst++ = *src1++ + *src2++;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src1++ + *src2++;
	}

	void SIMD::Sub( float* dst, float const* src1, float const* src2, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src1++ - *src2++;
			*dst++ = *src1++ - *src2++;
			*dst++ = *src1++ - *src2++;
			*dst++ = *src1++ - *src2++;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src1++ - *src2++;
	}

	void SIMD::Mul( float* dst, float const* src1, float const* src2, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src1++ * *src2++;
			*dst++ = *src1++ * *src2++;
			*dst++ = *src1++ * *src2++;
			*dst++ = *src1++ * *src2++;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src1++ * *src2++;
	}

	void SIMD::Div( float* dst, float const* src1, float const* src2, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src1++ / *src2++;
			*dst++ = *src1++ / *src2++;
			*dst++ = *src1++ / *src2++;
			*dst++ = *src1++ / *src2++;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src1++ / *src2++;
	}

	void SIMD::MulAdd( float* dst, float const* src1, float value, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ += *src1++ * value;
			*dst++ += *src1++ * value;
			*dst++ += *src1++ * value;
			*dst++ += *src1++ * value;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ += *src1++ * value;
	}

	void SIMD::Add( float* dst, float const* src, const float value, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src++ + value;
			*dst++ = *src++ + value;
			*dst++ = *src++ + value;
			*dst++ = *src++ + value;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src++ + value;
	}

	void SIMD::Sub( float* dst, float const* src, const float value, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src++ - value;
			*dst++ = *src++ - value;
			*dst++ = *src++ - value;
			*dst++ = *src++ - value;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src++ - value;
	}

	void SIMD::Mul( float* dst, float const* src, const float value, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src++ * value;
			*dst++ = *src++ * value;
			*dst++ = *src++ * value;
			*dst++ = *src++ * value;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src++ * value;
	}

	void SIMD::Div( float* dst, float const* src, const float value, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = *src++ / value;
			*dst++ = *src++ / value;
			*dst++ = *src++ / value;
			*dst++ = *src++ / value;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = *src++ / value;
	}

	void SIMD::Add( float* dst, float const* src1, const float (&value)[ 4 ], const size_t n ) const
	{
		size_t i = n >> 2;
		size_t x = 0;
		while( i-- ) {
			*dst++ = *src1++ + value[ 0 ];
			*dst++ = *src1++ + value[ 1 ];
			*dst++ = *src1++ + value[ 2 ];
			*dst++ = *src1++ + value[ 3 ];
		}
		i = n & 0x03;
		while( i-- ) {
			*dst++ = *src1++ + value[ x++ ];
			x &= 0x03;
		}
	}

	void SIMD::Sub( float* dst, float const* src1, const float (&value)[ 4 ], const size_t n ) const
	{
		size_t i = n >> 2;
		size_t x = 0;
		while( i-- ) {
			*dst++ = *src1++ - value[ 0 ];
			*dst++ = *src1++ - value[ 1 ];
			*dst++ = *src1++ - value[ 2 ];
			*dst++ = *src1++ - value[ 3 ];
		}
		i = n & 0x03;
		while( i-- ) {
			*dst++ = *src1++ - value[ x++ ];
			x &= 0x03;
		}
	}


	void SIMD::Mul( float* dst, float const* src1, const float (&value)[ 4 ], const size_t n ) const
	{
		size_t i = n >> 2;
		size_t x = 0;
		while( i-- ) {
			*dst++ = *src1++ * value[ 0 ];
			*dst++ = *src1++ * value[ 1 ];
			*dst++ = *src1++ * value[ 2 ];
			*dst++ = *src1++ * value[ 3 ];
		}
		i = n & 0x03;
		while( i-- ) {
			*dst++ = *src1++ * value[ x++ ];
			x &= 0x03;
		}
	}


	void SIMD::Div( float* dst, float const* src1, const float (&value)[ 4 ], const size_t n ) const
	{
		size_t i = n >> 2;
		size_t x = 0;
		while( i-- ) {
			*dst++ = *src1++ / value[ 0 ];
			*dst++ = *src1++ / value[ 1 ];
			*dst++ = *src1++ / value[ 2 ];
			*dst++ = *src1++ / value[ 3 ];
		}
		i = n & 0x03;
		while( i-- ) {
			*dst++ = *src1++ / value[ x++ ];
			x &= 0x03;
		}
	}


	void SIMD::MulSub( float* dst, float const* src1, const float value, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ -= *src1++ * value;
			*dst++ -= *src1++ * value;
			*dst++ -= *src1++ * value;
			*dst++ -= *src1++ * value;
		}
		i = n & 0x03;
		while( i-- )
			*dst++ -= *src1++ * value;
	}

	void SIMD::MulAdd( float* dst, float const* src1, const float (&value)[ 4 ], const size_t n ) const
	{
		size_t i = n >> 2;
		size_t x = 0;
		while( i-- ) {
			*dst++ += *src1++ * value[ 0 ];
			*dst++ += *src1++ * value[ 1 ];
			*dst++ += *src1++ * value[ 2 ];
			*dst++ += *src1++ * value[ 3 ];
		}
		i = n & 0x03;
		while( i-- ) {
			*dst++ += *src1++ * value[ x++ ];
			x &= 0x03;
		}
	}

	void SIMD::MulSub( float* dst, float const* src1, const float (&value)[ 4 ], const size_t n ) const
	{
		size_t i = n >> 2;
		size_t x = 0;
		while( i-- ) {
			*dst++ -= *src1++ * value[ 0 ];
			*dst++ -= *src1++ * value[ 1 ];
			*dst++ -= *src1++ * value[ 2 ];
			*dst++ -= *src1++ * value[ 3 ];
		}
		i = n & 0x03;
		while( i-- ) {
			*dst++ -= *src1++ * value[ x++ ];
			x &= 0x03;
		}
	}

	void SIMD::Conv_f_to_u8( uint8_t* dst, float const* src, const size_t n ) const
	{
		size_t i = n >> 2;
		while( i-- ) {
			*dst++ = ( uint8_t ) Math::clamp( *src++ * 255.0f + 0.5f, 0.0f, 255.0f );
			*dst++ = ( uint8_t ) Math::clamp( *src++ * 255.0f + 0.5f, 0.0f, 255.0f );
			*dst++ = ( uint8_t ) Math::clamp( *src++ * 255.0f + 0.5f, 0.0f, 255.0f );
			*dst++ = ( uint8_t ) Math::clamp( *src++ * 255.0f + 0.5f, 0.0f, 255.0f );
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = ( uint8_t ) Math::clamp( *src++ * 255.0f + 0.5f, 0.0f, 255.0f );

	}

	void SIMD::Conv_u8_to_f( float* dst, uint8_t const* src, const size_t n ) const
	{
		size_t i = n >> 2;
		uint32_t* src2;
		while( i-- ) {
			*dst++ = U8_TO_F( *src++ );
			*dst++ = U8_TO_F( *src++ );
			*dst++ = U8_TO_F( *src++ );
			*dst++ = U8_TO_F( *src++ );
		}
		i = n & 0x03;
		while( i-- )
			*dst++ = U8_TO_F( *src++ );
	}

	void SIMD::Conv_XXXAf_to_XXXAu8( uint8_t* _dst, float const* src, const size_t n ) const
	{
		size_t i = n;
		uint32_t* dst = ( uint32_t* ) _dst;
		uint32_t tmp;
		float __alpha;

		while( i-- ) {
			tmp = F_TO_SRGB_U8( *src++ );
			tmp |= F_TO_SRGB_U8( *src++ ) << 8;
			tmp |= F_TO_SRGB_U8( *src++ ) << 16;
			__alpha  = *( src++ );
			__alpha = Math::clamp( __alpha, 0.0f, 1.0f );
			tmp |= ( uint8_t ) ( ( __alpha * 255.0f + 0.5f ) ) << 24;
			*dst++ = tmp;
		}
	}


	void SIMD::Conv_XYZAf_to_ZYXAf( float* dst, float const* src, const size_t n ) const
	{
		size_t i = n;

		while( i-- ) {
			*dst++ = *( src + 2 );
			*dst++ = *( src + 1 );
			*dst++ = *( src );
			*dst++ = *( src + 3 );
			src += 4;
		}
	}

	void SIMD::Conv_XYZAf_to_ZYXAu8( uint8_t* _dst, float const* src, const size_t n ) const
	{
		size_t i = n;
		uint32_t* dst = ( uint32_t* ) _dst;
		uint32_t tmp;
		float __alpha;

		while( i-- ) {
			tmp = F_TO_SRGB_U8( *src++ ) << 16;
			tmp |= F_TO_SRGB_U8( *src++ ) << 8;
			tmp |= F_TO_SRGB_U8( *src++ );
			__alpha  = *src++;
			__alpha = Math::clamp( __alpha, 0.0f, 1.0f );
			tmp |= ( uint8_t ) ( ( __alpha * 255.0f + 0.5f ) ) << 24;
			*dst++ = tmp;
		}
	}

	void SIMD::Conv_XXXAu8_to_XXXAf( float* dst, uint8_t const* _src, const size_t n ) const
	{
		size_t i = n;
		uint32_t* src = ( uint32_t* ) _src;
		uint32_t tmp;

		while( i-- ) {
			tmp = *src++;
			*dst++ = SRGB_U8_TO_F( tmp & 0xff );
			*dst++ = SRGB_U8_TO_F( ( tmp >> 8 ) & 0xff );
			*dst++ = SRGB_U8_TO_F( ( tmp >> 16 ) & 0xff );
			*dst++ = U8_TO_F( tmp >> 24 );
		}
	}

	void SIMD::Conv_XYZAu8_to_ZYXAf( float* dst, uint8_t const* _src, const size_t n ) const
	{
		size_t i = n;
		uint32_t* src = ( uint32_t* ) _src;
		uint32_t tmp;

		while( i-- ) {
			tmp = *src++;
			*dst++ = SRGB_U8_TO_F( ( tmp >> 16 ) & 0xff );
			*dst++ = SRGB_U8_TO_F( ( tmp >> 8 ) & 0xff );
			*dst++ = SRGB_U8_TO_F( tmp & 0xff );
			*dst++ = U8_TO_F( tmp >> 24 );
		}
	}


	void SIMD::Conv_XYZAu8_to_ZYXAu8( uint8_t* _dst, uint8_t const* _src, const size_t n ) const
	{
		size_t i = n;
		uint32_t* src = ( uint32_t* ) _src;
		uint32_t* dst = ( uint32_t* ) _dst;
		uint32_t tmp1, tmp2;

		while( i-- ) {
			tmp1 = *src++;
			tmp2 = ( tmp1 & 0xff00ff00 );
			tmp2 += ( tmp1 & 0xff0000 ) >> 16;
			tmp2 += ( tmp1 & 0xff ) << 16;
			*dst++ = tmp2;
		}
	}

	void SIMD::ConvolveClampSet1f( float* dst, float const* src, const size_t width, float const* weights, const size_t wn ) const
	{
		float const* wp;
		float const* sp;
		float tmp;
		size_t i, k, b1, b2;

		b1 = ( wn - ( 1 - ( wn & 1 ) ) ) / 2;
		b2 = ( wn + ( 1 - ( wn & 1 ) ) ) / 2;

		/* border 1 */
		i = b1;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp = *sp * *wp++;
			k = i;
			while( k-- )
				tmp += *sp * *wp++;
			k = wn - 1 - i;
			while( k-- ) {
				tmp += *sp++ * *wp++;
			}
			*dst++ = tmp;
		}


		/* center */
		i = width - wn + 1;
		while( i-- ) {
			k = wn;
			sp = src;
			wp = weights;
			tmp = *sp++ * *wp++;
			k--;
			while( k-- )
				tmp += *sp++ * *wp++;
			*dst++ = tmp;
			src++;
		}

		/* border 2 */
		i = b2;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp = *sp++ * *wp++;
			k = b1 + i;
			while( k-- ) {
				tmp += *sp++ * *wp++;
			}
			k = b2 - i;
			sp--;
			while( k-- )
				tmp += *sp * *wp++;
			*dst++ = tmp;
			src++;
		}
	}

	void SIMD::ConvolveClampAdd1f( float* dst, float const* src, const size_t width, float const* weights, const size_t wn ) const
	{
		float const* wp;
		float const* sp;
		float tmp;
		size_t i, k, b1, b2;

		b1 = ( wn - ( 1 - ( wn & 1 ) ) ) / 2;
		b2 = ( wn + ( 1 - ( wn & 1 ) ) ) / 2;

		/* border 1 */
		i = b1;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp = *sp * *wp++;
			k = i;
			while( k-- )
				tmp += *sp * *wp++;
			k = wn - 1 - i;
			while( k-- ) {
				tmp += *sp++ * *wp++;
			}
			*dst++ += tmp;
		}


		/* center */
		i = width - wn + 1;
		while( i-- ) {
			k = wn;
			sp = src;
			wp = weights;
			tmp = *sp++ * *wp++;
			k--;
			switch( k & 7 ) {
				case 0: while( k ) {
							tmp += *sp++ * *wp++;
							k--;
							case 7:	tmp += *sp++ * *wp++;
									k--;
							case 6:	tmp += *sp++ * *wp++;
									k--;
							case 5:	tmp += *sp++ * *wp++;
									k--;
							case 4:	tmp += *sp++ * *wp++;
									k--;
							case 3:	tmp += *sp++ * *wp++;
									k--;
							case 2:	tmp += *sp++ * *wp++;
									k--;
							case 1:	tmp += *sp++ * *wp++;
									k--;
						}
			}
			*dst++ += tmp;
			src++;
		}

		/* border 2 */
		i = b2;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp = *sp++ * *wp++;
			k = b1 + i;
			while( k-- ) {
				tmp += *sp++ * *wp++;
			}
			k = b2 - i;
			sp--;
			while( k-- )
				tmp += *sp * *wp++;
			*dst++ += tmp;
			src++;
		}
	}

	void SIMD::ConvolveClampSet2f( float* dst, float const* src, const size_t width, float const* weights, const size_t wn ) const
	{
		float const* wp;
		float const* sp;
		float tmp[ 2 ];
		size_t i, k, b1, b2;

		b1 = ( wn - ( 1 - ( wn & 1 ) ) ) / 2;
		b2 = ( wn + ( 1 - ( wn & 1 ) ) ) / 2;

		/* border 1 */
		i = b1;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp++;
			k = i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
			}
			k = wn - 1 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
				sp += 2;
			}
			*dst++ = tmp[ 0 ];
			*dst++ = tmp[ 1 ];
		}


		/* center */
		i = width - wn + 1;
		while( i-- ) {
			k = wn;
			sp = src;
			wp = weights;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp++;
			sp += 2;
			k--;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
				sp += 2;
			}
			*dst++ = tmp[ 0 ];
			*dst++ = tmp[ 1 ];
			src += 2;
		}

		/* border 2 */
		i = b2;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp++;
			k = b1 + i;
			while( k-- ) {
				sp += 2;
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
			}
			k = b2 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
			}
			*dst++ = tmp[ 0 ];
			*dst++ = tmp[ 1 ];
			src += 2;
		}
	}

	void SIMD::ConvolveClampAdd2f( float* dst, float const* src, const size_t width, float const* weights, const size_t wn ) const
	{
		float const* wp;
		float const* sp;
		float tmp[ 2 ];
		size_t i, k, b1, b2;

		b1 = ( wn - ( 1 - ( wn & 1 ) ) ) / 2;
		b2 = ( wn + ( 1 - ( wn & 1 ) ) ) / 2;

		/* border 1 */
		i = b1;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp++;
			k = i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
			}
			k = wn - 1 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
				sp += 2;
			}
			*dst++ += tmp[ 0 ];
			*dst++ += tmp[ 1 ];
		}


		/* center */
		i = width - wn + 1;
		while( i-- ) {
			float w;
			k = wn;
			sp = src;
			wp = weights;
			w = *wp++;
			tmp[ 0 ] = *( sp + 0 ) * w;
			tmp[ 1 ] = *( sp + 1 ) * w;
			sp += 2;
			k--;
			switch( k & 7 ) {
				case 0: while( k ) {
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
							case 7:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
							case 6:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
							case 5:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
							case 4:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
							case 3:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
							case 2:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
							case 1:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							sp += 2;
							k--;
						}
			}
			*dst++ += tmp[ 0 ];
			*dst++ += tmp[ 1 ];
			src += 2;
		}

		/* border 2 */
		i = b2;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp++;
			k = b1 + i;
			while( k-- ) {
				sp += 2;
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
			}
			k = b2 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp++;
			}
			*dst++ += tmp[ 0 ];
			*dst++ += tmp[ 1 ];
			src += 2;
		}
	}

	void SIMD::ConvolveClampSet4f( float* dst, float const* src, const size_t width, float const* weights, const size_t wn ) const
	{
		float const* wp;
		float const* sp;
		float tmp[ 4 ];
		size_t i, k, b1, b2;

		b1 = ( wn - ( 1 - ( wn & 1 ) ) ) / 2;
		b2 = ( wn + ( 1 - ( wn & 1 ) ) ) / 2;

		/* border 1 */
		i = b1;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp;
			tmp[ 2 ] = *( sp + 2 ) * *wp;
			tmp[ 3 ] = *( sp + 3 ) * *wp++;
			k = i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
			}
			k = wn - 1 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
				sp += 4;
			}
			*dst++ = tmp[ 0 ];
			*dst++ = tmp[ 1 ];
			*dst++ = tmp[ 2 ];
			*dst++ = tmp[ 3 ];
		}


		/* center */
		i = width - wn + 1;
		while( i-- ) {
			k = wn;
			sp = src;
			wp = weights;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp;
			tmp[ 2 ] = *( sp + 2 ) * *wp;
			tmp[ 3 ] = *( sp + 3 ) * *wp++;
			sp += 4;
			k--;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
				sp += 4;
			}
			*dst++ = tmp[ 0 ];
			*dst++ = tmp[ 1 ];
			*dst++ = tmp[ 2 ];
			*dst++ = tmp[ 3 ];
			src += 4;
		}

		/* border 2 */
		i = b2;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp;
			tmp[ 2 ] = *( sp + 2 ) * *wp;
			tmp[ 3 ] = *( sp + 3 ) * *wp++;
			k = b1 + i;
			while( k-- ) {
				sp += 4;
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
			}
			k = b2 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
			}
			*dst++ = tmp[ 0 ];
			*dst++ = tmp[ 1 ];
			*dst++ = tmp[ 2 ];
			*dst++ = tmp[ 3 ];
			src += 4;
		}
	}

	void SIMD::ConvolveClampAdd4f( float* dst, float const* src, const size_t width, float const* weights, const size_t wn ) const
	{
		float const* wp;
		float const* sp;
		float tmp[ 4 ];
		size_t i, k, b1, b2;

		b1 = ( wn - ( 1 - ( wn & 1 ) ) ) / 2;
		b2 = ( wn + ( 1 - ( wn & 1 ) ) ) / 2;

		/* border 1 */
		i = b1;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp;
			tmp[ 2 ] = *( sp + 2 ) * *wp;
			tmp[ 3 ] = *( sp + 3 ) * *wp++;
			k = i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
			}
			k = wn - 1 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
				sp += 4;
			}
			*dst++ += tmp[ 0 ];
			*dst++ += tmp[ 1 ];
			*dst++ += tmp[ 2 ];
			*dst++ += tmp[ 3 ];
		}


		/* center */
		i = width - wn + 1;
		while( i-- ) {
			float w;
			k = wn;
			sp = src;
			wp = weights;
			w = *wp++;
			tmp[ 0 ] = *( sp + 0 ) * w;
			tmp[ 1 ] = *( sp + 1 ) * w;
			tmp[ 2 ] = *( sp + 2 ) * w;
			tmp[ 3 ] = *( sp + 3 ) * w;
			sp += 4;
			k--;
			switch( k & 7 ) {
				case 0: while( k ) {
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
							case 7:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
							case 6:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
							case 5:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
							case 4:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
							case 3:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
							case 2:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
							case 1:
							w = *wp++;
							tmp[ 0 ] += *( sp + 0 ) * w;
							tmp[ 1 ] += *( sp + 1 ) * w;
							tmp[ 2 ] += *( sp + 2 ) * w;
							tmp[ 3 ] += *( sp + 3 ) * w;
							sp += 4;
							k--;
						}
			}
			/*	while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
				sp += 4;
				}*/
			*dst++ += tmp[ 0 ];
			*dst++ += tmp[ 1 ];
			*dst++ += tmp[ 2 ];
			*dst++ += tmp[ 3 ];
			src += 4;
		}

		/* border 2 */
		i = b2;
		while( i-- ) {
			wp = weights;
			sp = src;
			tmp[ 0 ] = *( sp + 0 ) * *wp;
			tmp[ 1 ] = *( sp + 1 ) * *wp;
			tmp[ 2 ] = *( sp + 2 ) * *wp;
			tmp[ 3 ] = *( sp + 3 ) * *wp++;
			k = b1 + i;
			while( k-- ) {
				sp += 4;
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
			}
			k = b2 - i;
			while( k-- ) {
				tmp[ 0 ] += *( sp + 0 ) * *wp;
				tmp[ 1 ] += *( sp + 1 ) * *wp;
				tmp[ 2 ] += *( sp + 2 ) * *wp;
				tmp[ 3 ] += *( sp + 3 ) * *wp++;
			}
			*dst++ += tmp[ 0 ];
			*dst++ += tmp[ 1 ];
			*dst++ += tmp[ 2 ];
			*dst++ += tmp[ 3 ];
			src += 4;
		}
	}

	void SIMD::ConvolveAdaptiveClamp1f( float* _dst, float const* _src, const size_t w, IConvolveAdaptivef* conva ) const
	{
		IConvolveAdaptiveSize* sw;
		float* weights;
		uint32_t x;
		float pixel;
		float* dst = ( float* ) _dst;
		float* src = ( float* ) _src;
		size_t width = w;

		sw = conva->size;
		weights = conva->weights;

		while( width-- ) {
			pixel = 0;
			src += sw->incr;
			for( x = 0; x < sw->numw; x++ ) {
				pixel += *( src + x ) * *weights++;
			}
			*dst++ = pixel;
			sw++;
		}
	}

	void SIMD::ConvolveAdaptiveClamp2f( float* _dst, float const* _src, const size_t w, IConvolveAdaptivef* conva ) const
	{
		IConvolveAdaptiveSize* sw;
		float* weights;
		uint32_t x;
		float pixel[ 4 ];
		float* dst = ( float* ) _dst;
		float* src = ( float* ) _src;
		size_t width = w;

		sw = conva->size;
		weights = conva->weights;

		while( width-- ) {
			pixel[ 0 ] = 0.0f;
			pixel[ 1 ] = 0.0f;
			src += sw->incr * 2;
			for( x = 0; x < sw->numw; x++ ) {
				pixel[ 0 ] += *( src + x * 4 + 0 ) * *weights;
				pixel[ 1 ] += *( src + x * 4 + 1 ) * *weights++;
			}
			*dst++ = pixel[ 0 ];
			*dst++ = pixel[ 1 ];
			sw++;
		}
	}

	void SIMD::ConvolveAdaptiveClamp4f( float* _dst, float const* _src, const size_t w, IConvolveAdaptivef* conva ) const
	{
		IConvolveAdaptiveSize* sw;
		float* weights;
		uint32_t x;
		float pixel[ 4 ];
		float* dst = ( float* ) _dst;
		float* src = ( float* ) _src;
		size_t width = w;

		sw = conva->size;
		weights = conva->weights;

		while( width-- ) {
			pixel[ 0 ] = 0.0f;
			pixel[ 1 ] = 0.0f;
			pixel[ 2 ] = 0.0f;
			pixel[ 3 ] = 0.0f;
			src += sw->incr * 4;
			for( x = 0; x < sw->numw; x++ ) {
				pixel[ 0 ] += *( src + x * 4 + 0 ) * *weights;
				pixel[ 1 ] += *( src + x * 4 + 1 ) * *weights;
				pixel[ 2 ] += *( src + x * 4 + 2 ) * *weights;
				pixel[ 3 ] += *( src + x * 4 + 3 ) * *weights++;
			}
			*dst++ = pixel[ 0 ];
			*dst++ = pixel[ 1 ];
			*dst++ = pixel[ 2 ];
			*dst++ = pixel[ 3 ];
			sw++;
		}
	}

	BEGIN_CVTTEST( simd )
		float* fdst;
		float* fsrc1;
		float* fsrc2;
		float val1 = 1.23f;
		float val4[ 4 ] = { 0.5f, 2.0f, 1.4323f, 0.2f };
		Timer tmr;
		double t;

#define TESTSIZE ( 32 + 3 )
		fdst = new float[ TESTSIZE ];
		fsrc1 = new float[ TESTSIZE ];
		fsrc2 = new float[ TESTSIZE ];

		for( size_t i = 0; i < TESTSIZE; i++ ) {
			fsrc1[ i ] = ( ( float ) i ) / 10.0f;
			fsrc2[ i ] = 1.0f - fsrc1[ i ];
			fdst[ i ] = 0.0f;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			for( size_t i = 0; i < TESTSIZE; i++ )
				fdst[ i ] = 0.0f;
			simd->Add( fdst, fsrc1, fsrc2, TESTSIZE );
			std::cout << simd->name() << " Add:" << std::endl;
			for( size_t i = 0; i < TESTSIZE; i++ )
				std::cout << fsrc1[ i ] << " + " << fsrc2[ i ] << " = " << fdst[ i ] << std::endl;
			std::cout << std::endl;
		}
		delete[] fdst;
		delete[] fsrc1;
		delete[] fsrc2;
#undef TESTSIZE


#define TESTSIZE ( 2048 * 2048 )
		fdst = new float[ TESTSIZE ];
		fsrc1 = new float[ TESTSIZE ];
		fsrc2 = new float[ TESTSIZE ];

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Add( fdst, fsrc1, fsrc2, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Add "  << t  << " ms" << std::endl;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Sub( fdst, fsrc1, fsrc2, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Sub "  << t  << " ms" << std::endl;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Mul( fdst, fsrc1, fsrc2, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Mul "  << t  << " ms" << std::endl;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Div( fdst, fsrc1, fsrc2, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Div "  << t  << " ms" << std::endl;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Add( fdst, fsrc1, 10.0f, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Add Const "  << t  << " ms" << std::endl;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Sub( fdst, fsrc1, 10.0f, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Sub Const "  << t  << " ms" << std::endl;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Mul( fdst, fsrc1, 10.0f, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Mul Const "  << t  << " ms" << std::endl;
		}

		for( int st = SIMD_BASE; st < SIMD_BEST; st++ ) {
			SIMD* simd = SIMD::get( ( SIMDType ) st );
			t = 0;
			for( int iter = 0; iter < 100; iter++ ) {
				tmr.reset();
				simd->Div( fdst, fsrc1, 10.0f, TESTSIZE );
				t += tmr.elapsedMiliSeconds();
			}
			t /= 100.0;
			std::cout << simd->name() << " Div Const "  << t  << " ms" << std::endl;
		}
		delete[] fdst;
		delete[] fsrc1;
		delete[] fsrc2;
#undef TESTSIZE

		return true;
	END_CVTTEST

}
